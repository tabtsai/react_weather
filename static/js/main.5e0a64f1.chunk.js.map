{"version":3,"sources":["components/animate/Counter.js","components/weather/Current.js","background.js","components/weather/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["Counter","_this","this","counterAnimate","count","document","querySelector","tween","to","props","nowTemp","duration","start","v","innerHTML","Math","round","classList","add","fade","querySelectorAll","forEach","item","window","setTimeout","nextProps","console","log","tempBlock","remove","length","react_default","a","createElement","Fragment","id","React","Component","Current","_props$weatherInfo","weatherInfo","dt","toFarenheit","x","Object","keys","className","dist_default","format","weather","description","animate_Counter","main","temp","temp_max","temp_min","Link","concat","Background","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","current","cityName","cityId","citySearch","bind","assertThisInitialized","getCurrent","event","setState","target","value","_this2","preventDefault","fetch","then","response","ok","json","results","catch","err","text","errorMessage","alert","onSubmit","onChange","placeholder","name","autoComplete","type","weather_Current","fetchInfo","App","background","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e0a64f1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { tween } from 'popmotion';\r\nimport '../../App.css';\r\n\r\nclass Counter extends React.Component {\r\n\r\n    \r\n\r\n    componentDidMount(){\r\n        const counterAnimate = () => {\r\n            const count = document.querySelector('#currentTemp');\r\n            const updateCounter = (v) => count.innerHTML = Math.round(v);\r\n            tween({to: this.props.nowTemp, duration: 4000 }).start(updateCounter);\r\n\r\n            const tempBlock = document.querySelector('.theTemp');\r\n            tempBlock.classList.add('tempAnimate');\r\n        }\r\n        const fade = () => {\r\n            const fadeArray = document.querySelectorAll(\".animateFade\");\r\n            fadeArray.forEach(function(item){\r\n                item.classList.add('fadeIn')\r\n            })\r\n        }\r\n        const delayedAnimation = () => {\r\n            window.setTimeout(counterAnimate, 2000); \r\n            window.setTimeout(fade, 500); \r\n         \r\n        }\r\n        delayedAnimation();\r\n    }\r\n    \r\n    componentWillReceiveProps(nextProps){\r\n        console.log('receiveprops');\r\n        if(this.props.nowTemp !== nextProps.nowTemp){\r\n               const count = document.querySelector('#currentTemp');\r\n               const updateCounter = (v) => count.innerHTML = Math.round(v);\r\n               tween({to: this.props.nowTemp, duration: 4000 }).start(updateCounter);\r\n\r\n               const tempBlock = document.querySelector('.theTemp');\r\n               tempBlock.classList.remove('tempAnimate');\r\n               tempBlock.classList.add('tempAnimate');\r\n           \r\n           \r\n        \r\n        }\r\n\r\n     \r\n    }\r\n    render(){\r\n            const search = document.querySelector('.searchBox');\r\n            search.classList.add('moveUp');\r\n            if (this.props.nowTemp.length===0){\r\n                return null;\r\n            } else {\r\n\r\n            \r\n            console.log('render here');\r\n                      \r\n            return(\r\n                <React.Fragment>\r\n                \r\n                        <h1 id = \"currentTemp\">{this.props.nowTemp}</h1>\r\n                        <span>&deg;</span><span>F</span>\r\n                    \r\n        \r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n    \r\n\r\nexport default Counter;","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport {Link} from 'react-router-dom';\r\nimport Counter from '../animate/Counter';\r\nimport '../../App.css';\r\n\r\n\r\n\r\nconst Current = (props) => {\r\n\r\n    console.log(props)\r\n    const {dt, id} = props.weatherInfo;\r\n    \r\n    const toFarenheit = function(x){\r\n        return (Math.round((x-273.15) * 9/5 + 32));\r\n    }\r\n  \r\n        if (Object.keys(props.weatherInfo).length===0){\r\n            return null;\r\n        } else { \r\n            console.log( props.weatherInfo);\r\n        return(\r\n            <React.Fragment>\r\n                <section className = \"time animateFade\">\r\n                        <Moment className =\"timeMonth\" format=\"MMMM\" >{dt*1000}</Moment>\r\n                        <Moment className =\"timeDay\"format=\"DD\">{dt*1000}</Moment>\r\n                        <Moment className =\"timeHour\" format=\"h:mm A\">{dt*1000}</Moment>\r\n                </section>\r\n                    <div className = \"currentCard animateFade\">\r\n                    <p className = 'description'>{props.weatherInfo.weather[0].description}</p>\r\n                    <div className = 'theTemp'>\r\n                        <Counter nowTemp = {toFarenheit(props.weatherInfo.main.temp)} />\r\n                    </div>\r\n                    <section className = 'hilo'>\r\n                        <p className =\"dailyHigh\">High: { toFarenheit(props.weatherInfo.main.temp_max)} / Low: { toFarenheit(props.weatherInfo.main.temp_min)} </p>\r\n                   \r\n                    </section>\r\n                    <section className = \"conditions\">\r\n                        <p> Precipitation: 50%</p>\r\n                        <p> Humidity: 60%</p>\r\n                    </section>\r\n                    </div>\r\n                <Link className ='primaryButton forecastButton' to ={`forecast/${id}`}> Get Forecast</Link>\r\n\r\n            </React.Fragment>\r\n\r\n        )\r\n    \r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default Current;","import React, {Component} from 'react';\r\nimport Current from './components/weather/Current';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport Forecast from './components/weather/Forecast';\r\n\r\n// import Moment from 'react-moment';\r\n\r\n\r\nconst OWKey = '7fa3b6273bb810b4c6dab61ec0b4a32f';\r\n\r\nclass Background extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            current: {},\r\n            cityName:'',\r\n            cityId:''\r\n            }\r\n        this.citySearch = this.citySearch.bind(this);\r\n        this.getCurrent = this.getCurrent.bind(this);\r\n        // this.getForecast = this.getForecast.bind(this);\r\n    }\r\n\r\n    citySearch(event){\r\n        this.setState({\r\n          cityName: event.target.value\r\n        })\r\n    }\r\n\r\n    getCurrent(event){\r\n        event.preventDefault();\r\n        fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${this.state.cityName}&APPID=${OWKey}`)\r\n        .then( response => {\r\n            if (!response.ok) { throw response }\r\n            return response.json()  //we only get here if there is no error\r\n          })\r\n          .then(results => {\r\n            this.setState({\r\n                current: results\r\n            })\r\n        })\r\n          .catch( err => {\r\n            err.text().then( errorMessage => {\r\n              window.alert('please try another city name');\r\n              this.setState({\r\n                  cityName: ''\r\n                })\r\n            })\r\n          })\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n        \r\n        return(\r\n            <div className = \"container\">\r\n                \r\n                <div className = \"searchBox\">\r\n                    <form onSubmit = {this.getCurrent}>\r\n                        <input \r\n                            value = {this.state.cityName} \r\n                            onChange = {this.citySearch} \r\n                            placeholder = \"City name...\"\r\n                            name = \"cityName\"\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        <button className ='primaryButton' type = \"submit\">Get Weather</button>\r\n                    </form>\r\n                </div>\r\n                {/* <Router>\r\n                    <Switch>\r\n                        <Route exact path ='/' render = {(props) => <Current {...props} weatherInfo = {this.state.current} fetchInfo = {this.getCurrent}/> } />\r\n                        <Route exact path = '/forecast/:id' component = {Forecast} />\r\n                    </Switch>\r\n                </Router> */}\r\n                <Current weatherInfo = {this.state.current} fetchInfo = {this.getCurrent} />\r\n                \r\n            </div>\r\n            \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Background;\r\n","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst OWKey = '7fa3b6273bb810b4c6dab61ec0b4a32f';\r\n\r\nclass Forecast extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            forecast: []\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n            fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast/daily?id=${this.props.match.params.id}&cnt=10&APPID=${OWKey}`)\r\n            .then(response => response.json())\r\n            .then(results => {\r\n                    console.log(results.list)\r\n                    this.setState ({\r\n                        forecast: results.list\r\n                    })\r\n            })\r\n            .catch(console.error)\r\n        }\r\n\r\n    render(){\r\n        const toFarenheit= function(x){\r\n            return (Math.round((x-273.15) * 9/5 + 32));\r\n        }\r\n        return(\r\n            <React.Fragment>\r\n            <div id = 'forecastContainer'>\r\n                 {this.state.forecast.map(function(item){\r\n                    return (\r\n                            \r\n                                <div className = \"weeklyForecast\" key = {item.dt}>\r\n                                    <Moment format=\"ddd\">{item.dt*1000}</Moment>\r\n                                    <p>{toFarenheit(item.temp.day)}</p>\r\n                                    <img src = {`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}  alt = {`http://openweathermap.org/img/w/${item.weather[0].main}`}/>\r\n                                </div>\r\n                           \r\n                      \r\n                    )\r\n                }) }\r\n                \r\n              \r\n                \r\n                </div>\r\n                  <Link className=\"primaryButton\" to = \"/\"> Back to Search </Link>  \r\n            </React.Fragment> \r\n        )\r\n    }\r\n}\r\n\r\nexport default Forecast;","import React, { Component } from 'react';\n\n// import {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Background from './background';\n// import Forecast from './components/weather/Forecast';\nimport './App.css';\n\n// import Current from './components/weather/Current';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n         {/* <Router>\n            <Switch>\n              <Route exact path = \"/\" component = {Background} />\n              <Route exact path = \"/forecast/:id\" component = {Forecast} />\n            </Switch>\n          </Router> */}\n          <Background />\n       </React.Fragment>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}