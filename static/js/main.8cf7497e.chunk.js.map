{"version":3,"sources":["components/animate/Counter.js","components/weather/Forecast.js","components/weather/Current.js","background.js","App.js","serviceWorker.js","index.js"],"names":["Counter","_this","this","counterAnimate","count","document","querySelector","tween","to","props","nowTemp","duration","start","v","innerHTML","Math","round","classList","add","fade","querySelectorAll","forEach","item","window","setTimeout","nextProps","console","log","tempBlock","remove","length","react_default","a","createElement","Fragment","id","React","Component","Forecast","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","forecastDisplay","toggleForecast","bind","assertThisInitialized","setState","className","forecast","slice","map","key","dt","dist_default","format","x","temp","day","src","concat","weather","icon","alt","main","onClick","Current","weatherInfo","toFarenheit","keys","description","animate_Counter","temp_max","temp_min","weather_Forecast","OWKey","Background","current","cityName","cityId","citySearch","getCurrent","event","target","value","_this2","preventDefault","fetch","then","response","ok","json","results","list","catch","error","_this3","onSubmit","onChange","placeholder","name","autoComplete","type","BrowserRouter","Switch","Route","exact","path","process","render","weather_Current","assign","fetchInfo","App","background","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8cf7497e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { tween } from 'popmotion';\r\nimport '../../App.css';\r\n\r\nclass Counter extends React.Component {\r\n\r\n    \r\n\r\n    componentDidMount(){\r\n        const counterAnimate = () => {\r\n            const count = document.querySelector('#currentTemp');\r\n            const updateCounter = (v) => count.innerHTML = Math.round(v);\r\n            tween({to: this.props.nowTemp, duration: 4000 }).start(updateCounter);\r\n\r\n            const tempBlock = document.querySelector('.theTemp');\r\n            tempBlock.classList.add('tempAnimate');\r\n        }\r\n        const fade = () => {\r\n            const fadeArray = document.querySelectorAll(\".animateFade\");\r\n            fadeArray.forEach(function(item){\r\n                item.classList.add('fadeIn')\r\n            })\r\n        }\r\n        const delayedAnimation = () => {\r\n            window.setTimeout(counterAnimate, 2000); \r\n            window.setTimeout(fade, 500); \r\n         \r\n        }\r\n        delayedAnimation();\r\n    }\r\n    \r\n    componentWillReceiveProps(nextProps){\r\n        console.log('receiveprops');\r\n        if(this.props.nowTemp !== nextProps.nowTemp){\r\n               const count = document.querySelector('#currentTemp');\r\n               const updateCounter = (v) => count.innerHTML = Math.round(v);\r\n               tween({to: this.props.nowTemp, duration: 4000 }).start(updateCounter);\r\n\r\n               const tempBlock = document.querySelector('.theTemp');\r\n               tempBlock.classList.remove('tempAnimate');\r\n               tempBlock.classList.add('tempAnimate');\r\n           \r\n           \r\n        \r\n        }\r\n\r\n     \r\n    }\r\n    render(){\r\n            const search = document.querySelector('.searchBox');\r\n            search.classList.add('moveUp');\r\n            if (this.props.nowTemp.length===0){\r\n                return null;\r\n            } else {\r\n\r\n            \r\n            console.log('render here');\r\n                      \r\n            return(\r\n                <React.Fragment>\r\n                \r\n                        <h1 id = \"currentTemp\">{this.props.nowTemp}</h1>\r\n                        <span>&deg;</span><span>F</span>\r\n                    \r\n        \r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n    \r\n\r\nexport default Counter;","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport {Link} from 'react-router-dom';\r\n\r\n// const OWKey = '7fa3b6273bb810b4c6dab61ec0b4a32f';\r\n\r\n\r\n    class Forecast extends React.Component{\r\n        constructor(props){\r\n            super(props);\r\n            this.state = {\r\n                forecastDisplay:false\r\n            };\r\n            this.toggleForecast = this.toggleForecast.bind(this)\r\n        }\r\n    \r\n        toggleForecast(){\r\n          \r\n            if (this.state.forecastDisplay === true) {\r\n            this.setState({\r\n                forecastDisplay: false\r\n            });\r\n        } else {\r\n                this.setState({\r\n                forecastDisplay: true\r\n                })\r\n                \r\n            }\r\n\r\n       \r\n              \r\n        }\r\n    \r\n\r\n    // componentDidMount(){\r\n    //         fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast/daily?id=${this.props.match.params.id}&cnt=10&APPID=${OWKey}`)\r\n    //         .then(response => response.json())\r\n    //         .then(results => {\r\n    //                 console.log(results.list)\r\n    //                 this.setState ({\r\n    //                     forecast: results.list\r\n    //                 })\r\n    //         })\r\n    //         .catch(console.error)\r\n    //     }\r\n\r\n    render(){\r\n        const toFarenheit= function(x){\r\n            return (Math.round((x-273.15) * 9/5 + 32));\r\n        }\r\n        if (this.state.forecastDisplay) {\r\n            return(\r\n                <React.Fragment>\r\n                <div id = 'forecastContainer' className=\"animateFade\">\r\n                     {this.props.forecast.slice(1).map(function(item){\r\n                        return (\r\n                                \r\n                                    <div className = \"weeklyForecast\" key = {item.dt}>\r\n                                        <Moment format=\"ddd\">{item.dt*1000}</Moment>\r\n                                        <p>{toFarenheit(item.temp.day)}</p>\r\n                                        <img src = {`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}  alt = {`http://openweathermap.org/img/w/${item.weather[0].main}`}/>\r\n                                    </div>\r\n                               \r\n                          \r\n                        )\r\n                    }) }\r\n                    \r\n                  \r\n                    \r\n                    </div>\r\n                      {/* <Link className=\"primaryButton\" to = {process.env.PUBLIC_URL + '/'}> Back to Search </Link>   */}\r\n                </React.Fragment> \r\n            )\r\n                }else {\r\n            return (\r\n                \r\n                <button className ='primaryButton' onClick={this.toggleForecast}>Get Forecast</button>\r\n                \r\n            )\r\n            }}\r\n        \r\n        \r\n    // }\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\r\nimport Moment from 'react-moment';\r\n// import {Link} from 'react-router-dom';\r\nimport Counter from '../animate/Counter';\r\nimport '../../App.css';\r\nimport Forecast from './Forecast';\r\n\r\n\r\n\r\nconst Current = (props) => {\r\n\r\n    \r\n    console.log(props)\r\n    const {dt} = props.weatherInfo;\r\n    const toFarenheit = function(x){\r\n        return (Math.round((x-273.15) * 9/5 + 32));\r\n    }\r\n    \r\n        if (Object.keys(props.weatherInfo).length===0){\r\n            return null;\r\n        } else { \r\n            console.log( props.weatherInfo);\r\n        return(\r\n            <React.Fragment>\r\n                <section className = \"time animateFade\">\r\n                        <Moment className =\"timeMonth\" format=\"MMMM\" >{dt*1000}</Moment>\r\n                        <Moment className =\"timeDay\"format=\"DD\">{dt*1000}</Moment>\r\n                        <Moment className =\"timeHour\" format=\"h:mm A\">{dt*1000}</Moment>\r\n                </section>\r\n                    <div className = \"currentCard animateFade\">\r\n                    <p className = 'description'>{props.weatherInfo.weather[0].description}</p>\r\n                    <div className = 'theTemp'>\r\n                        <Counter nowTemp = {toFarenheit(props.weatherInfo.main.temp)} />\r\n                    </div>\r\n                    <section className = 'hilo'>\r\n                        <p className =\"dailyHigh\">High: { toFarenheit(props.weatherInfo.main.temp_max)} / Low: { toFarenheit(props.weatherInfo.main.temp_min)} </p>\r\n                   \r\n                    </section>\r\n                    <section className = \"conditions\">\r\n                        <p> Precipitation: 50%</p>\r\n                        <p> Humidity: 60%</p>\r\n                    </section>\r\n                    </div>\r\n               \r\n                   <Forecast forecast = {props.forecast}></Forecast>\r\n                    \r\n            </React.Fragment>\r\n\r\n        )\r\n    \r\n    }\r\n}\r\n\r\n\r\nexport default Current;","import React, {Component} from 'react';\r\nimport Current from './components/weather/Current';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport Forecast from './components/weather/Forecast';\r\n\r\n// import Moment from 'react-moment';\r\n\r\n\r\nconst OWKey = '7fa3b6273bb810b4c6dab61ec0b4a32f';\r\n\r\nclass Background extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            current: {},\r\n            cityName:'',\r\n            cityId:'',\r\n            forecast:[]\r\n            }\r\n        this.citySearch = this.citySearch.bind(this);\r\n        this.getCurrent = this.getCurrent.bind(this);\r\n        // this.getForecast = this.getForecast.bind(this);\r\n    }\r\n\r\n    citySearch(event){\r\n        this.setState({\r\n          cityName: event.target.value\r\n        })\r\n    }\r\n\r\n    getCurrent(event){\r\n        event.preventDefault();\r\n        fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${this.state.cityName}&APPID=${OWKey}`)\r\n        .then( response => {\r\n            if (!response.ok) { throw response }\r\n            return response.json()  //we only get here if there is no error\r\n          })\r\n          .then(results => {\r\n            this.setState({\r\n                current: results\r\n            })\r\n            return(\r\n                fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast/daily?q=${this.state.cityName}&cnt=10&APPID=${OWKey}`)\r\n                .then(response => response.json())\r\n                .then(results => {\r\n                        console.log(results.list)\r\n                        this.setState ({\r\n                            forecast: results.list\r\n                        })\r\n                })\r\n                .catch(console.error)\r\n            )\r\n\r\n        })\r\n        //   .catch( err => {\r\n        //     err.text().then( errorMessage => {\r\n        //       window.alert('please try another city name');\r\n        //       this.setState({\r\n        //           cityName: ''\r\n        //         })\r\n        //     })\r\n        //   })\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n        \r\n        return(\r\n            <div className = \"container\">\r\n                \r\n                <div className = \"searchBox\">\r\n                    <form onSubmit = {this.getCurrent}>\r\n                        <input \r\n                            value = {this.state.cityName} \r\n                            onChange = {this.citySearch} \r\n                            placeholder = \"City name...\"\r\n                            name = \"cityName\"\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        <button className ='primaryButton' type = \"submit\">Get Weather</button>\r\n                    </form>\r\n                </div>\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path = {process.env.PUBLIC_URL + '/'} render = {(props) => <Current {...props} weatherInfo = {this.state.current} fetchInfo = {this.getCurrent} forecast = {this.state.forecast}/> } />\r\n                        {/* <Route exact path = {process.env.PUBLIC_URL + '/forecast/:id'} component = {Forecast} /> */}\r\n                    </Switch>\r\n                </Router>\r\n                {/* <Current weatherInfo = {this.state.current} fetchInfo = {this.getCurrent} /> */}\r\n                \r\n            </div>\r\n            \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Background;\r\n","import React, { Component } from 'react';\n\n// import {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Background from './background';\n// import Forecast from './components/weather/Forecast';\nimport './App.css';\n\n// import Current from './components/weather/Current';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n         {/* <Router>\n            <Switch>\n              <Route exact path = \"/\" component = {Background} />\n              <Route exact path = \"/forecast/:id\" component = {Forecast} />\n            </Switch>\n          </Router> */}\n          <Background />\n       </React.Fragment>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}